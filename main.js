/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianToMochiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/icons.ts
var icons = {
  transform: {
    key: "transform",
    svgContent: '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill="white" d="M12 .037C5.373.037 0 5.394 0 12c0 6.606 5.373 11.963 12 11.963c6.628 0 12-5.357 12-11.963C24 5.394 18.627.037 12 .037m-.541 4.8c1.91-.13 3.876.395 5.432 1.934c1.426 1.437 2.51 3.44 2.488 5.317h2.133l-4.444 4.963l-4.445-4.963h2.313c-.001-1.724-.427-2.742-1.78-4.076c-1.325-1.336-2.667-2.11-4.978-2.303a9.245 9.245 0 0 1 3.281-.871zM6.934 6.95l4.445 4.963H9.066c0 1.724.426 2.742 1.778 4.076c1.326 1.336 2.667 2.112 4.978 2.305c-2.684 1.268-6.22 1.398-8.71-1.064c-1.427-1.437-2.512-3.44-2.489-5.317H2.488z"/></svg>'
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var ObsidianToMochiPlugin = class extends import_obsidian.Plugin {
  addIcons() {
    (0, import_obsidian.addIcon)(icons.transform.key, icons.transform.svgContent);
  }
  // Runs whenever the user starts using the plugin in Obsidian 
  async onload() {
    console.log("LOADING");
    await this.loadSettings();
    this.addIcons();
    const transformIcon = this.addRibbonIcon(icons.transform.key, "Mochi Plugin- Convert!", (evt) => {
      new import_obsidian.Notice("Hi from Mochi!");
      let activeFile = this.app.workspace.getActiveFile();
      console.log(typeof activeFile);
      console.log(activeFile);
    });
    transformIcon.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  // Runs when the plugin is disabled
  onunload() {
    console.log("UNLOADING");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
